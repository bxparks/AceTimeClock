#!/usr/bin/python3
#
# Python script that regenerates the README.md from the embedded template. Uses
# ./generate_table.awk to regenerate the ASCII tables from the various *.txt
# files.

from subprocess import check_output

nano_results = check_output(
    "./generate_table.awk < nano.txt", shell=True, text=True)
micro_results = check_output(
    "./generate_table.awk < micro.txt", shell=True, text=True)
samd21_results = check_output(
    "./generate_table.awk < samd21.txt", shell=True, text=True)
stm32_results = check_output(
    "./generate_table.awk < stm32.txt", shell=True, text=True)
samd51_results = check_output(
    "./generate_table.awk < samd51.txt", shell=True, text=True)
esp8266_results = check_output(
    "./generate_table.awk < esp8266.txt", shell=True, text=True)
esp32_results = check_output(
    "./generate_table.awk < esp32.txt", shell=True, text=True)

print(f"""\
# Memory Benchmark

The `MemoryBenchmark.ino` was compiled with each `FEATURE_*` and the flash
memory and static RAM sizes were recorded. The `FEATURE_BASELINE` selection is
the baseline, and its memory usage  numbers are subtracted from the subsequent
`FEATURE_*` memory usage.

**Version**: AceTimeClock v1.3.0

**DO NOT EDIT**: This file was auto-generated using `make README.md`.

## How to Regenerate

To regenerate this README.md:

```
$ make clean_benchmarks
$ make benchmarks
$ make README.md
```

The `make benchmarks` target uses `collect.sh` script which calls `auniter.sh`
(https://github.com/bxparks/AUniter) to invoke the Arduino IDE programmatically.
It produces a `*.txt` file with the flash and ram usage information (e.g.
`nano.txt`). It now takes about 16 minutes to generate the `*.txt` files on my
quad-core Intel Core i7-3840QM CPU @ 2.80GHz laptop.

The `make README.md` command calls the `generated_readme.py` Python script which
generates this `README.md` file. The ASCII tables below are generated by the
`generate_table.awk` script, which takes each `*.txt` file and converts it to an
ASCII table.

## Library Size Changes

**v1.0.0**

* Initial split from AceTime v1.7.5 for v1.8.0.
* Convert `DS3231.h` into a template class for `<AceWire.h>`, replacing direct
  dependency on `<Wire.h>`.
    * Just including the `<Wire.h>` header causes flash memory to be consumed,
      even if `Wire` object is never used.
    * Saves 1000-1500 bytes of flash on AVR processors.
    * Saves 500 bytes of flash on SAMD.
    * Saves 4000 bytes of flash STM32.
    * Saves 500 bytes of flash on ESP8266.
    * Saves 3000-4000 bytes of flash on ESP32.
    * Saves 2500 bytes of flash on Teensy 3.2.
* Add benchmark for `DS3231Clock` separately from `SytemClock`.
* Add benchmarks for `SystemClockCoroutine` separately from `SystemClockLoop`.
* Rename `SystemClock` label to `SystemClockLoop`.

**v1.0.2**

* Fix bad merge in README.md.
* Create benchmarks for 3 variations of `DS3231Clock`: TwoWire, SimpleWire, and
  SimpleWireFast.
    * Make sure `<Wire.h>` is *not* included when using SimpleWireInterface and
      SimpleWireFastInterface.
    * Flash consumption reduced by 1600 bytes using SimpleWireInterface and
      2200 bytes using `SimpleWireInterface` on AVR.
    * Saves 800-8800 bytes of flash on 32-bit processors.

**v1.1.0**

* Upgrade tool chains
    * Arduino IDE from 1.8.16 to 1.8.19
    * Arduino CLI from 0.19.2 to 0.20.2
    * STM32duino from 2.0.0 to 2.2.0
    * AVR Core from 1.8.3 to 1.8.4
    * ESP32 Core from 1.0.6 to 2.0.2
    * Teensyduino from 1.55 to 1.56
* Add benchmark entries for:
    * `StmRtcClock`
    * `Stm32F1Clock`
    * `NtpClock`
    * `EspSntpClock`
* ESP32
    * `NtpClock` and `EspSntpClock` increases flash usage by ~400kB and
      static RAM usage by ~20KB.
    * Such a large increase is *not* seen on the ESP8266.
    * Probably due to `<WiFi.h>`.
* STM32
    * Using `<STM32RTC.h>` through `StmRtcClock` consumes an extra ~4kB of flash
      compared to using `Stm32F1Clock`.

**v1.2.2**

* Upgrade tool chains
    * Arduino CLI to 0.27.1
    * STM32duino to 2.3.0
    * AVR Core from 1.8.4 to 1.8.5
    * ESP32 Core from 2.0.2 to 2.0.5
    * Teensyduino from 1.56 to 1.57
* Upgrade to AceTime v2.0
    * Update `NtpClock` to use AceTime `Epoch::currentEpochYear()`
* Many `Clock` classes increase in flash size
    * AVR: 100-400 bytes
    * ESP8266: 50-150 bytes
    * Most likely due to the adjustable AceTime epoch
      (`Epoch::currentEpochYear()`), and the change from `int8_t` year to
      `int16_t` year.

**v1.2.4**

* Upgrade tool chains
    * Arduino CLI to 0.31.0
    * STM32duino to 2.4.0
    * AVR Core to 1.8.6
    * ESP32 Core to 2.0.7
* Upgrade to AceTime v2.2.1

**v1.3.0**

* Upgrade tool chains
* Upgrade to AceTime v2.3

## Arduino Nano

* 16MHz ATmega328P
* Arduino IDE 1.8.19, Arduino CLI 0.33.0
* Arduino AVR Boards 1.8.6

```
{nano_results}
```

## Sparkfun Pro Micro

* 16 MHz ATmega32U4
* Arduino IDE 1.8.19, Arduino CLI 0.33.0
* SparkFun AVR Boards 1.1.13

```
{micro_results}
```

## Seeed Studio XIAO SAMD21

* SAMD21, 48 MHz ARM Cortex-M0+
* Arduino IDE 1.8.19, Arduino CLI 0.33.0
* Seeeduino SAMD Boards 1.8.4

```
{samd21_results}
```

## STM32 Blue Pill

* STM32F103C8, 72 MHz ARM Cortex-M3
* Arduino IDE 1.8.19, Arduino CLI 0.33.0
* STM32duino 2.6.0

```
{stm32_results}
```

## SAMD51 Adafruit ItsyBitsy M4

* SAMD51, 120 MHz ARM Cortex-M4
* Arduino IDE 1.8.19, Arduino CLI 0.33.0
* Adafruit SAMD 1.7.11

```
{samd51_results}
```

## ESP8266

* NodeMCU 1.0, 80MHz ESP8266
* Arduino IDE 1.8.19, Arduino CLI 0.33.0
* ESP8266 Boards 3.0.2

```
{esp8266_results}
```

## ESP32

* ESP32-01 Dev Board, 240 MHz Tensilica LX6
* Arduino IDE 1.8.19, Arduino CLI 0.33.0
* ESP32 Boards 2.0.9

```
{esp32_results}
```

RAM usage remains constant as more objects are created, which indicates that an
initial pool of a certain minimum size is created regardless of the actual RAM
usage by objects.
""")
